# Generated by Django 3.2.6 on 2021-09-29 13:36

import betting.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expired', models.BooleanField()),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ConfigModel',
            fields=[
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Configuration',
                'verbose_name_plural': 'Configurations',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DepositWithdrawMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(help_text='Method name to be shown to users', max_length=255)),
                ('number1', models.CharField(max_length=32)),
                ('number2', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'Method',
                'verbose_name_plural': 'Method List',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_time', models.DateTimeField(help_text='When match will be locked for betting.')),
                ('game_name', models.CharField(choices=[('football', 'Football'), ('cricket', 'Cricket'), ('tennis', 'Tennis'), ('others', 'Others')], help_text='name of the game', max_length=255)),
                ('hide', models.BooleanField(default=False)),
                ('locked', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, help_text='When match will be unlocked for betting.')),
                ('title', models.CharField(help_text='title of the match. eg: Canada vs USA', max_length=255)),
            ],
            options={
                'ordering': ['-end_time', '-start_time', 'game_name'],
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=255)),
                ('rate', models.FloatField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Withdraw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('bkash', 'bKash'), ('rocket', 'DBBL Rocket'), ('nagad', 'Nagad'), ('upay', 'Upay'), ('mcash', 'Mcash'), ('mycash', 'My Cash'), ('surecash', 'Sure Cash'), ('trustpay', 'Trust Axiata Pay'), ('transfer', 'Transfer'), ('club', 'Club W/D'), ('commission', 'Commission'), ('refer', 'Referral')], help_text='method used to do transaction', max_length=50)),
                ('amount', models.FloatField(help_text='how much money transacted in 2 point precession decimal number')),
                ('user_account', models.CharField(blank=True, help_text='bank account number. Used for deposit and withdraw', max_length=255, null=True)),
                ('site_account', models.CharField(blank=True, help_text='bank account number of the website', max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('user_balance', models.FloatField(blank=True, default=0, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, default=None, help_text='Status if admin had verified. After verification(for deposit), user account will be deposited', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(help_text='User id of transaction maker', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='how much money transacted in 2 point precession decimal number')),
                ('balance', models.FloatField(blank=True, default=0, help_text='User balance after transfer', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(blank=True, help_text='Description of transfer', null=True)),
                ('status', models.BooleanField(blank=True, default=None, help_text='Status if admin had verified. After verification(for deposit), user account will be deposited', null=True)),
                ('club', models.ForeignKey(blank=True, help_text='Club Id from which money is going to be transferred', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.club')),
                ('recipient', models.ForeignKey(help_text='User id to whom money transferred', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recipients', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(help_text='User id of transaction maker', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='how much money transacted in 2 point precession decimal number')),
                ('balance', models.FloatField(blank=True, default=0, help_text='User possible balance after deposit', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When deposit is made')),
                ('deposit_source', models.CharField(choices=[('bank', 'From Bank'), ('refer', 'Referral'), ('commission', 'Club Commission')], help_text='Options are, commission|bank|refer', max_length=50)),
                ('method', models.CharField(choices=[('bkash', 'bKash'), ('rocket', 'DBBL Rocket'), ('nagad', 'Nagad'), ('upay', 'Upay'), ('mcash', 'Mcash'), ('mycash', 'My Cash'), ('surecash', 'Sure Cash'), ('trustpay', 'Trust Axiata Pay'), ('transfer', 'Transfer'), ('club', 'Club W/D'), ('commission', 'Commission'), ('refer', 'Referral')], help_text='method used to do transaction', max_length=50)),
                ('site_account', models.CharField(blank=True, help_text='bank account number of the website', max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction id of user send money', max_length=255, null=True)),
                ('user_account', models.CharField(blank=True, help_text='bank account number. Used for deposit and withdraw', max_length=255, null=True)),
                ('status', models.BooleanField(blank=True, default=None, help_text='Status if admin had verified. After verification(for deposit), user account will be deposited', null=True)),
                ('club', models.ForeignKey(blank=True, help_text='Club id which balance will be updated', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.club')),
                ('user', models.ForeignKey(blank=True, help_text='User id of transaction maker', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BetQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_time', models.DateTimeField(blank=True, help_text='when this question will no longer accept bet', null=True)),
                ('hide', models.BooleanField(default=False, help_text='If the game is hidden')),
                ('locked', models.BooleanField(default=False, help_text='Force lock question before end time')),
                ('paid', models.BooleanField(default=False, help_text='If all bet under this question is paid')),
                ('question', models.CharField(help_text='Question of bet', max_length=1023)),
                ('match', models.ForeignKey(help_text='Id of the match under which this is question', on_delete=django.db.models.deletion.CASCADE, to='betting.match')),
                ('options', models.ManyToManyField(help_text='Question options for user', to='betting.QuestionOption')),
                ('winner', models.ForeignKey(blank=True, help_text='Winner option id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gnn', to='betting.questionoption')),
            ],
            options={
                'verbose_name_plural': 'Bet Options',
                'ordering': ['-end_time'],
            },
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(help_text='How much he/she bet')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time when bet is created')),
                ('is_winner', models.BooleanField(blank=True, default=None, help_text='If this bet is winner', null=True)),
                ('paid', models.BooleanField(default=False, help_text='If this bet is paid')),
                ('win_rate', models.FloatField(blank=True, default=1.0, help_text='Multiplication with bet amount', null=True)),
                ('user_balance', models.FloatField(default=0.0, help_text='User balance after bet')),
                ('win_amount', models.FloatField(default=0, help_text='How much will get if wins')),
                ('bet_question', models.ForeignKey(help_text='For which question bet is done', on_delete=django.db.models.deletion.PROTECT, to='betting.betquestion', validators=[betting.models.bet_question_validator])),
                ('choice', models.ForeignKey(help_text='Choice for question', on_delete=django.db.models.deletion.CASCADE, to='betting.questionoption')),
                ('user', models.ForeignKey(help_text='User id who betting', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['bet_question', '-created_at'],
            },
        ),
    ]
